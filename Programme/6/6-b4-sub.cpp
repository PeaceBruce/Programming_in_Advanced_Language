/* 2353814 马小龙 信05 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：求字符串str长度
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i=0;
    if (str == NULL)
        return 0;
    for (; *str != '\0'; str++,i++)
        ;
    return i;
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2追加到s1后面，含\0
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcat(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* str;
    if (s1 != NULL && s2 != NULL) {
        str = s1 + tj_strlen(s1);
        for (; *s2 !='\0'; str++, s2++)
            *str = *s2;
        *str = *s2;
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2的前len个字符追加到s1后面，并添加\0
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncat(char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* str = s1;
    if (s1 != NULL && s2 != NULL) {
        str = s1 + tj_strlen(s1);
        for (int i = 1; i <= len && *s2 != '\0'; str++, s2++, i++)
            *str = *s2;
        *str = '\0';
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcpy(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* str = s1;
    if (s1 != NULL) {
        if (s2 == NULL)
            *str = '\0';
        else {
            for (; *s2 != '\0'; str++, s2++)
                *str = *s2;
            *str = *s2;
        }
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2前len个字符复制到s1中，复制时不含\0
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncpy(char *s1, const char *s2, const int len)
{
    char* str = s1;
    if (s1 != NULL && s2 != NULL) {
        for (int i = 1; i <= len && *s2 != '\0'; str++, s2++, i++)
            *str = *s2;
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小，英文字母区分大小写
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    else if (s1 != NULL && s2 == NULL)
        return 1;
    else if (s1 == NULL && s2 != NULL)
        return - 1;
    else {
        for (; *s1 != '\0' || *s2 != '\0'; s1++, s2++) {
            if (*s1 != *s2)
                return *s1 - *s2;
        }
        return 0;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    else if (s1 != NULL && s2 == NULL)
        return 1;
    else if (s1 == NULL && s2 != NULL)
        return -1;
    else {
        for (; *s1 != '\0' || *s2 != '\0'; s1++, s2++) {
            if (*s1 != *s2) {
                if (*s1 >= 97 && *s1 <= 122 && *s1 - *s2 == 32)
                    continue;
                else if (*s1 >= 65 && *s1 <= 90 && *s2 - *s1 == 32)
                    continue;
                else {
                    if (*s1 >= 65 && *s1 <= 90)
                        return *s1 - *s2 + 32;
                    else if (*s2 >= 65 && *s2 <= 90)
                        return *s1 - *s2 - 32;
                    else
                        return *s1 - *s2;
                }
            }
        }
        return 0;
    }
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2前len个字符的大小，英文字母区分大小写
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    else if (s1 != NULL && s2 == NULL)
        return 1;
    else if (s1 == NULL && s2 != NULL)
        return -1;
    else {
        for (int i=1;i<=len&&( *s1 != '\0' || *s2 != '\0'); s1++, s2++,i++) {
            if (*s1 != *s2)
                return *s1 - *s2;
        }
        return 0;
    }

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2前len个字符的大小，英文字母不区分大小写
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    else if (s1 != NULL && s2 == NULL)
        return 1;
    else if (s1 == NULL && s2 != NULL)
        return -1;
    else {
        for (int i = 1; i <= len && (*s1 != '\0' || *s2 != '\0'); s1++, s2++, i++) {
            if (*s1 != *s2) {
                if (*s1 >= 97 && *s1 <= 122 && *s1 - *s2 == 32)
                    continue;
                else if (*s1 >= 65 && *s1 <= 90 && *s2 - *s1 == 32)
                    continue;
                else {
                    if (*s1 >= 65 && *s1 <= 90)
                        return *s1 - *s2 + 32;
                    else if (*s2 >= 65 && *s2 <= 90)
                        return *s1 - *s2 - 32;
                    else
                        return *s1 - *s2;
                }
            }
        }
        return 0;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：将字符串中的所有小写字母转为大写，其他字符不变，转换后放在原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strupr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* s = str;
    if (str != NULL) {
        for (; *s != '\0'; s++) {
            if (*s >= 97 && *s <= 122)
                *s -= 32;
        }
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：字符串中的所有大写字母转为小写，其他字符不变，转换后放在原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strlwr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* s = str;
    if (str != NULL) {
        for (; *s != '\0'; s++) {
            if (*s >= 65 && *s <= 90)
                *s += 32;
        }
    }
    return str;
    return str;
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符ch第一次出现的位置，顺序是从左到右
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str != NULL) {
        for (int i = 1; *str != '\0'; i++, str++) {
            if (*str == ch)
                return i;
        }
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符串substr第一次出现的位置，顺序是从左到右
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str != NULL && substr != NULL) {
        for(int i = 1; *str != '\0'; i++, str++) {
            if (*str == *substr) {
                int j = 0;
                for (; *substr != '\0'&&*str!='\0'; str++, substr++, j++) {
                    if (*str != *substr)
                        break;
                }
                str -= j;
                substr -= j;
                if (j == tj_strlen(substr))
                    return i;
            }
        }
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符ch第一次出现的位置，顺序是从右到左
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str != NULL && *str != '\0') {
        int i = tj_strlen(str);
        str += tj_strlen(str) - 1;
        for (; i >= 0; i--, str--) {
            if (*str == ch)
                return i;
        }
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符串substr第一次出现的位置，顺序是从右到左
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str != NULL && substr != NULL&&*str!='\0'&&*substr!='\0') {
        int i = tj_strlen(str);
        int ret = tj_strlen(substr);
        str += tj_strlen(str) - 1;
        substr += tj_strlen(substr) - 1;
        for (; i > 0; i--, str--) {
            if (*str == *substr) {
                int j = ret;
                for (; j>0; str--, substr--, j--) {
                    if (*str != *substr)
                        break;
                }
                str += (ret-j);
                substr += (ret - j);
                if (j == 0)
                    return i-ret+1;
            }
        }
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：字符串反转，放在原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strrev(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str != NULL&&*str!='\0') {
        char* a = str;
        char* b = str + tj_strlen(str) - 1;
        for (;a<=b;a++,b--) {
            char ret = *a;
            *a = *b;
            *b = ret;
        }
    }
    return str;
}
